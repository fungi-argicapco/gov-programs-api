Epic ID,Epic Name,Feature ID,Feature Name,User Story ID,User Story Title,Task ID,Task Description,Codex Prompt,Status
E01,Atlas Design System & Tokens,F01.1,Define & Build Tokens,US01.1.1,Centralize design definitions in tokens.json,T01.1.1.1,"Create tokens.json file with colors, spacing, radius, elevation, motion, z-index and type scale definitions in packages/atlas-tokens.","Create a JSON file at packages/atlas-tokens/tokens.json containing design token definitions (colors, spacings, typography scales, radii, elevations, motions and z-index). Export as ES modules if needed and commit.",Completed
E01,Atlas Design System & Tokens,F01.1,Define & Build Tokens,US01.1.2,Generate CSS and Tailwind from tokens,T01.1.2.1,"Implement build script to output CSS variables, Tailwind preset and TypeScript definitions from tokens.json.","Write a build script at packages/atlas-tokens/build.ts that reads tokens.json and emits CSS variables (tokens.css), a tailwind preset (tailwind.preset.cjs) and TypeScript definitions (tokens.d.ts). Use Node to compile and write files in packages/atlas-svelte/src/lib/styles.",Completed
E01,Atlas Design System & Tokens,F01.2,Svelte UI Primitives,US01.2.1,Provide basic UI components for design system,T01.2.1.1,"Develop Button, Card, Badge, Input, Select and Modal components in packages/atlas-svelte/src/lib/components with props for variant, size, disabled, icons and slot content.","Create Svelte components (Button, Card, Badge, Input, Select, Modal) under packages/atlas-svelte/src/lib/components. Use tokens for styling, support variants (primary, ghost, outline, danger), sizes (sm, md, lg), disabled states and slots. Ensure accessible markup and export these components from packages/atlas-svelte/src/lib/index.ts.",Completed
E01,Atlas Design System & Tokens,F01.2,Svelte UI Primitives,US01.2.2,Integrate tokens into web app,T01.2.2.1,Import tokens.css in apps/web/src/app.css and create a preview page at apps/web/src/routes/design/preview/+page.svelte demonstrating the primitives under different themes.,"Modify apps/web/src/app.css to import tokens.css generated by the build script. Create a new route /design/preview/+page.svelte that imports and displays Button, Card, Badge, Input, Select and Modal components in light and dark themes with interactive examples.",Completed
E01,Atlas Design System & Tokens,F01.3,Testing foundation,US01.3.1,Ensure type and unit test coverage for primitives,T01.3.1.1,Set up minimal Vitest tests for each primitive verifying props and accessible output.,"Write Vitest tests in packages/atlas-svelte/tests for Button, Card, Badge, Input, Select and Modal verifying that props render correctly, accessible roles are present and CSS classes reflect variants. Ensure bun run typecheck and bun run test:unit pass.",Completed
E02,Global Layout & Navigation,F02.1,App Shell & Navigation,US02.1.1,As a user I need a top bar and side navigation to access sections,T02.1.1.1,Create TopBar.svelte and SideNav.svelte components with responsive design and accessible roles.,"Build TopBar.svelte to include logo, search input, alerts icon and profile dropdown. Build SideNav.svelte to include nav links for Discover, Capital, Partners, Assets, Plans, Intelligence and Admin, support collapsible state on mobile and highlight active link. Use tokens for styling.",Completed
E02,Global Layout & Navigation,F02.1,App Shell & Navigation,US02.1.2,Integrate layout and nav across routes,T02.1.2.1,Create AppShell.svelte that composes TopBar and SideNav and wraps page content. Set up layout with grid and responsive breakpoints.,Add AppShell.svelte in apps/web/src/lib/layout that renders TopBar and SideNav components and uses a slot for page content. Update root +layout.svelte to wrap page routes with AppShell. Configure responsive grid and CSS classes based on tokens.,Completed
E02,Global Layout & Navigation,F02.2,Command Palette,US02.2.1,As a power user I want to open a command palette using Cmd+K and search for pages,T02.2.1.1,Create CommandPalette.svelte component with an input field and results list; implement keyboard shortcuts and navigation.,"Develop CommandPalette.svelte that listens to Cmd+K to open. Provide an input to filter pages and use arrow keys to navigate results. When selecting a result, navigate to the route. Use accessible roles and ensure focus management. Add to AppShell.",Completed
E02,Global Layout & Navigation,F02.3,Accessibility & Keyboard,US02.3.1,Ensure navigation and palette support keyboard and screen readers,T02.3.1.1,"Write a11y unit tests using axe and Playwright to verify focus order, ARIA roles and keyboard navigation.",Completed, top bar and command palette are accessible: roles specified, focusable elements in correct order, and keyboard navigation works as expected. Use bun test commands.",Completed
E03,Report Cards & Evidence,F03.1,ReportCard component,US03.1.1,As a user I need to see trust metrics for programs and partners,T03.1.1.1,"Develop ReportCard.svelte displaying scale, focus, speed, reliability, additionality and references sections with collapsible content.","Create ReportCard.svelte in packages/atlas-svelte/src/lib/components that accepts an object of scores and details, renders metric rows with bar/score and expand/collapse sections. Include slots for references and use tokens for styling.",Completed
E03,Report Cards & Evidence,F03.2,EvidenceBlock component,US03.2.1,As a user I need to view data provenance and freshness for each metric,T03.2.1.1,"Create EvidenceBlock.svelte showing source, freshness and lineage link with a chip style.","Develop EvidenceBlock.svelte that accepts props for source name, freshness (e.g., 7d), and a link to view lineage. Display as a chip with icons and ensure accessible alt text. Export from package index.",Completed
E03,Report Cards & Evidence,F03.3,Integrate cards into pages,US03.3.1,Integrate report cards and evidence blocks into capital and partners pages with mock data,T03.3.1.1,Update /capital and /partners pages to use ReportCard and EvidenceBlock components for each listing using mocked scores and provenance.,Modify apps/web/src/routes/capital/+page.svelte and /partners pages to fetch sample data or use static objects and render ReportCard and EvidenceBlock for programs and partners. Ensure layout responsive and add tests for rendering.,Completed
E03,Report Cards & Evidence,F03.4,Snapshot & a11y tests,US03.4.1,Ensure report card components display correctly and accessible,T03.4.1.1,Write snapshot tests for ReportCard states and accessibility checks for headings and landmarks.,Implement Vitest snapshot tests for ReportCard collapsed and expanded states. Use @axe-core/svelte to verify headings hierarchy and region landmarks for screen readers.,Completed
E04,Capital Finder,F04.1,Search Form & Filters,US04.1.1,"As a user I want to filter funding programs by country, benefit type, status, date range and sort order",T04.1.1.1,Implement a search form with multi-select filters and date pickers in /capital page.,"Develop UI components for search fields: country select, multi-select benefit types, status select, date-range pickers and sorting dropdown. Use the tokens for styling and update query parameters accordingly.",Todo
E04,Capital Finder,F04.2,API Integration,US04.2.1,As a user I want to see results from /v1/programs based on my filters,T04.2.1.1,Create API client to call GET /v1/programs with query params; update results table.,"Develop a TypeScript API client in apps/web/src/lib/api/programs.ts to construct query string from filters and fetch data. Display results in a responsive table with columns: Program Name, Benefit Type, Country, Deadline, and include EvidenceBlock for each row to show data freshness and source.",Completed
E04,Capital Finder,F04.3,State Persistence,US04.3.1,Persist filter state in URL and restore when navigating back,T04.3.1.1,Update /capital page to sync filters with URL query parameters and restore state when page loads.,"Use SvelteKit stores or page params to read and write query parameters representing filter selections. On mount, parse the URL to set initial filter state and update the URL when filters change.",Completed
E04,Capital Finder,F04.4,Testing integration,US04.4.1,Add unit tests for query builder and E2E tests for filter actions,T04.4.1.1,Write unit tests for the query string builder and API client; Write Playwright tests to verify filtering results and pagination.,"Create Vitest tests to ensure query string builder returns expected query string for given filters. Create Playwright tests to apply filters on the /capital page Depends on completion of T02.3.1.1 and T03.4.1.1. Depends on completion of T02.3.1.1 and T03.4.1.1.,Completed,Completed
E05,Capital Stack Builder,F05.1,Stack Builder Component,US05.1.1,As a project planner I need to assemble a capital stack of funding sources and uses,T05.1.1.1,Develop StackBuilder.svelte with drag-and-drop zones for sources and uses; display real-time summary of totals and match %.,Create packages/atlas-svelte/src/lib/components/StackBuilder.svelte that displays two drop zones for Sources and Uses. Implement drag-and-drop via svelte-dnd-action or custom logic to move items. Show running totals for each zone and validate match percentage.,Todo
E05,Capital Stack Builder,F05.2,Validation & Summary,US05.2.1,"Validate eligibility rules such as geography, award maximum and match percentage",T05.2.1.1,"Implement validation hooks that check geographic eligibility, award max, match %, and deadlines. Display warnings when rules are violated.","Extend the StackBuilder to incorporate validation rules: check each funding source matches geography of the blueprint, does not exceed program max, and ensures co-funding requirement is met. Show warnings or errors in UI if validation fails.",Todo
E05,Capital Stack Builder,F05.3,Export Blueprint Draft,US05.3.1,Provide JSON payload for initial Blueprint when exporting stack,T05.3.1.1,Implement export button that collects selected sources and uses and generates blueprint JSON.,"Add button labelled ""Export → Blueprint draft"" that collects current sources and uses lists, calculates totals and match %, packages them into JSON structure and triggers navigation to the Blueprint composer step with this data.",Todo
E05,Capital Stack Builder,F05.4,Testing builder,US05.4.1,Unit test validation functions and E2E test building a stack,T05.4.1.1,Write unit tests for validation functions and Playwright test to create a sample capital stack and view summary.,"Create Vitest tests for functions that compute match percentage and validate award limits. Write Playwright tests to drag programs into stack zones, verify summary calculations, check that warnings appear when rules are violated and ensure export button triggers expected JSON payload.",Todo
E06,Blueprint Composer,F06.1,Composer Wizard,US06.1.1,"As a planner I need a step-by-step wizard to create blueprints: define problem, evidence, stack, plan, risks, impact",T06.1.1.1,Develop BlueprintComposer.svelte with stepper UI capturing necessary data for each section.,"Implement packages/atlas-svelte/src/lib/components/BlueprintComposer.svelte that displays a multi-step form with sections: Problem, Evidence, Stack, Plan, Risks, Impact. Provide navigation between steps and validate required fields. Use tokens for styling.",Todo
E06,Blueprint Composer,F06.2,Export Service,US06.2.1,As a user I need to export LOI or SOW documents from blueprint data,T06.2.1.1,Create export endpoint in apps/api/src/routes/export.ts that converts markdown to PDF/DOCX using templater and returns file.,"Implement an API route /export that accepts blueprint JSON, loads templates for LOI.md and SOW.md from docs/templates, fills placeholders with provided data and generates PDF and DOCX using a library like DocxTemplater or pdf-lib. Return file URLs stored in R2 or direct download.",Todo
E06,Blueprint Composer,F06.3,Templates,US06.3.1,Define LOI.md and SOW.md templates with placeholders for blueprint fields,T06.3.1.1,"Create docs/templates/LOI.md and docs/templates/SOW.md with sections covering cover summary, problem definition, stakeholders, solution, capital stack, implementation and risks. Include placeholders for dynamic data.","Write Markdown templates LOI.md and SOW.md in docs/templates directory. Use clearly defined placeholder keys corresponding to blueprint JSON fields (e.g., {{title}}, {{problem}}, {{capital_stack}}). Ensure templates follow best practices and are easily editable.",Todo
E06,Blueprint Composer,F06.4,Testing composer and export,US06.4.1,Write unit tests for data binding and E2E tests for exporting documents,T06.4.1.1,Write tests to ensure data from Blueprint Composer binds correctly into the templates and that exported documents are generated successfully.,"Create Vitest tests verifying that blueprint data correctly populates template placeholders. Create Playwright tests that run through the wizard, generate a sample blueprint, submit to the export endpoint and verify that PDF/DOCX downloads occur and contain the correct content.",Todo
E07,Map & Asset Atlas,F07.1,MapCanvas component,US07.1.1,As a user I need to view assets on an interactive map with layer toggles,T07.1.1.1,Develop MapCanvas.svelte using MapLibre GL JS and implement base map layer.,"Implement packages/atlas-svelte/src/lib/components/MapCanvas.svelte that initializes MapLibre map, sets style and controls and provides a slot or prop to add layers. Use tokens for map colors if needed.",Todo
E07,Map & Asset Atlas,F07.2,Layers & Legend,US07.2.1,"Implement toggles for hazards, grid and zoning layers and add map legend",T07.2.1.1,Create LayerToggle.svelte and Legend.svelte components. Add them to MapCanvas and allow enabling/disabling each layer.,"Develop LayerToggle.svelte that lists available layers (hazards, grid, zoning) with checkboxes to toggle. Build Legend.svelte to display color keys for each layer. Integrate with MapCanvas to add/remove respective vector/raster layers accordingly.",Todo
E07,Map & Asset Atlas,F07.3,Feature Selection & Sheet,US07.3.1,As a user I need to click on an asset and see its details,T07.3.1.1,Create FeatureSheet.svelte that shows attribute info when an asset is selected on map.,Implement FeatureSheet.svelte that displays selected asset properties in a side panel. Use Svelte store to track selected feature from MapCanvas. Provide close button and ensure responsive layout.,Todo
E07,Map & Asset Atlas,F07.4,Demo Data,US07.4.1,Provide fixtures for assets and integrate them into the map for development,T07.4.1.1,Add demo assets JSON in apps/web/src/lib/fixtures/assets.json and load them into MapCanvas on page load.,"Create a fixtures file with sample assets including coordinates, names, types and properties. On /assets page, import these fixtures and add them as a GeoJSON source to MapCanvas; ensure toggles interact correctly.",Todo
E07,Map & Asset Atlas,F07.5,Testing map components,US07.5.1,Write unit and smoke tests for MapCanvas and layer toggles,T07.5.1.1,Write tests verifying layer toggling logic and that FeatureSheet opens when clicking a feature.,"Use Vitest to test functions controlling layer toggles and selection logic. Use Playwright to load the /assets page, toggle layers, click features, and assert that the FeatureSheet appears with correct information.",Todo
E08,Signals & Alerts,F08.1,Calendar KV & Writer Job,US08.1.1,As an operator I need application windows to be stored in KV for quick deadline lookups,T08.1.1.1,Implement a writer job that extracts application windows from programs and writes them into a Calendar KV namespace.,"Create apps/ingest/src/jobs/application-calendar.ts to iterate programs (source or DB), compute start and end timestamps, and write each entry to CALENDAR_KV bound in wrangler.toml. Use cron to schedule job.",Todo
E08,Signals & Alerts,F08.2,DeadlineBar Component,US08.2.1,As a user I need to see upcoming program deadlines in a global bar,T08.2.1.1,Develop DeadlineBar.svelte that reads from Calendar KV and displays closing deadlines with relative dates.,Create packages/atlas-svelte/src/lib/components/DeadlineBar.svelte that fetches data from a /v1/calendar API or direct KV and displays a horizontal list of items showing program names and days until close. Update AppShell to include the DeadlineBar at the top.,Todo
E08,Signals & Alerts,F08.3,Integration & refresh,US08.3.1,Integrate DeadlineBar into AppShell and refresh regularly,T08.3.1.1,Add DeadlineBar to AppShell layout and implement auto-refresh interval.,Modify AppShell.svelte to import DeadlineBar. Use a timer to refresh data every X minutes. Ensure timezone is respected and bar hides when no upcoming deadlines.,Todo
E08,Signals & Alerts,F08.4,Testing KV and bar,US08.4.1,Write unit tests for KV writer and date math; smoke test the deadline bar UI,T08.4.1.1,Write tests for the Calendar writer to ensure correct window derivation and Playwright tests that verify deadline bar displays correct counts.,"Write Vitest tests for date calculations in the writer job. Use Playwright to seed a sample program entry in KV, run the bar in local dev and assert that programs appear with correct time remaining.",Todo
E09,Partners Directory,F09.1,Directory Pages,US09.1.1,As a user I need separate pages for technology and delivery partners,T09.1.1.1,Create /partners/technology and /partners/delivery pages listing partner cards with filter options.,"Develop pages apps/web/src/routes/partners/technology/+page.svelte and /delivery. Add filter UI (sector, geography, rating) and map each partner to a ReportCard component. Use sample data initially.",Todo
E09,Partners Directory,F09.2,Compare Mode,US09.2.1,Enable users to compare two partners side by side,T09.2.1.1,"Implement a compare tray that appears when two partners are selected, showing their report cards side by side.","Add state to the directory to track selected partners. When two are selected, display a tray overlay with two ReportCard components side by side and ability to clear selection.",Todo
E09,Partners Directory,F09.3,API stub & sample data,US09.3.1,Provide API endpoint returning partners list with sample data and descriptions,T09.3.1.1,Create apps/api/src/routes/partners.ts to return mock partner JSON and update fetch logic.,"Implement a Hono route /v1/partners that returns sample partner data (id, name, type, sector, geography, scores, references). Use this endpoint in the directory pages for initial data.",Todo
E09,Partners Directory,F09.4,Filtering & a11y tests,US09.4.1,Test filtering logic and ensure directory pages are accessible,T09.4.1.1,Write unit tests for filter functions and Playwright tests for selecting and comparing partners.,"Write Vitest tests for functions that filter partners by sector or geography. Use Playwright to open the directory, apply filters, select two partners, view compare tray and check ARIA roles and keyboard navigation.",Todo
E10,Country Playbooks,F10.1,API Endpoint,US10.1.1,As a client I need a playbooks endpoint per country returning structured data,T10.1.1.1,Implement /v1/playbooks/:country API route returning playbook details.,"Create a route in apps/api/src/routes/playbooks.ts that reads a JSON or database table for each supported country (GB, FR, DE, JP, PE, SV, US, CA). Structure includes sections: overview, funding, regulatory, delivery landscape, data assets and quick starts.",Todo
E10,Country Playbooks,F10.2,Playbook Page & Sections,US10.2.1,As a user I need a page to view the playbook for a given country with anchor navigation,T10.2.1.1,Develop /playbooks/[country]/+page.svelte that fetches playbook data and renders sections with headings and anchor navigation.,"Use load function to fetch the playbook via /v1/playbooks/:country. Render each section with appropriate headings, paragraphs and lists. Add anchor links to a TOC sidebar that highlight section when in view.",Todo
E10,Country Playbooks,F10.3,Linking from Discover,US10.3.1,Allow users to jump to playbook from problem explorer or other pages,T10.3.1.1,Add links from the Discover and other pages to playbook pages and pre-select filters based on country context.,"Modify Problem Explorer page to include a “View Playbook” button for each country. When clicked, navigate to the playbook page and highlight relevant sections. Ensure query state is preserved.",Todo
E10,Country Playbooks,F10.4,Playbook tests,US10.4.1,Write unit test for API schema validation and Playwright test for page rendering,T10.4.1.1,Write tests verifying the playbook API returns valid structure and that the page renders and anchors scroll correctly.,"Use Vitest to validate the API response against a TypeScript interface or JSON schema. Use Playwright to visit each country’s playbook page, click anchor links and ensure sections scroll to correct positions and anchor highlights update.",Todo
E11,Problem Explorer,F11.1,Explorer UI,US11.1.1,As a user I need a map and table to explore problems by sector and geography,T11.1.1.1,Build /discover page with map clusters and table view; implement SDG/sector/geography filters.,"Create a page at apps/web/src/routes/discover/+page.svelte that loads problem data (demo) into a MapCanvas and a separate table. Provide filter UI for SDG, sector, geography and severity. Render selected problem details in a panel.",Todo
E11,Problem Explorer,F11.2,Problem Panel & Plan Start,US11.2.1,As a user I need to view problem details and initiate blueprint planning,T11.2.1.1,Implement a problem details panel that shows severity and evidence; add “Start Plan” button to pre-fill blueprint composer.,"When clicking a problem in the map or table, open a side panel with details (title, severity, indicators, signals). Include button “Start Plan” that navigates to the Blueprint composer with problem pre-selected and context data prefilled.",Todo
E11,Problem Explorer,F11.3,Filter state & demos,US11.3.1,Provide at least 6 demo problems across initial countries and maintain filter state in the URL,T11.3.1.1,Add sample problem data and sync filter selections to URL parameters.,"Populate a JSON file with at least six problems across UK, France, Japan, Peru, Mexico, Germany. Sync filter selections to query parameters so page state persists. Provide tests for filtering and navigation.",Todo
E11,Problem Explorer,F11.4,Testing explorer,US11.4.1,Write tests for filtering and selection persistence in Problem Explorer,T11.4.1.1,"Write Vitest tests for filter functions and Playwright tests for interactions (filtering, selecting problem, starting plan).","Create functions to filter problems by SDG, sector, geography and severity and test them. Write Playwright tests to apply filters, select a problem and ensure state persists across reloads and navigation to blueprint composer.",Todo
E12,Ikigai & Profile,F12.1,Ikigai Onboarding Wizard,US12.1.1,"As a learner I need to complete a profile capturing Joy, Mastery, Need and Value to receive recommendations",T12.1.1.1,"Develop wizard in /ikigai page to collect responses for each lens, with validations and progress indicators.","Create /ikigai/+page.svelte with a multi-step form prompting the user for interests (Joy), skills (Mastery), community needs (Need) and market signals (Value). Validate input at each step, show progress bar and store responses.",Todo
E12,Ikigai & Profile,F12.2,Recommendation Engine,US12.2.1,As a learner I need personalized micro-stack suggestions based on my Ikigai profile,T12.2.1.1,Implement recommend.ts function that calculates recommended stacks using simple scoring algorithm and returns top results.,"Develop apps/web/src/lib/ikigai/recommend.ts that processes Ikigai responses, weights them against available micro-stacks and returns top 3-5 suggestions. Use factors like alignment with interests, skill fit and market need.",Todo
E12,Ikigai & Profile,F12.3,Persist Profile & Recommendations,US12.3.1,Store user profiles and recommendations in D1 database,T12.3.1.1,Create D1 migrations for ikigai_profiles and ikigai_recommendations tables and implement server-side persistence.,"Write SQL migration adding tables for ikigai_profiles and ikigai_recommendations with fields for user_id, responses, recommended_stacks and timestamps. Implement endpoints or actions to save and retrieve profiles from these tables.",Todo
E12,Ikigai & Profile,F12.4,Export Profile Summary,US12.4.1,Enable exporting Ikigai profile summary to include in blueprint planning,T12.4.1.1,Implement export function that generates a summary section for the blueprint composer from Ikigai data,"Provide a function to convert Ikigai profile to summary text or JSON (including key interests, skills, community needs, market values) and attach to blueprint composer data structure. Provide tests to verify proper mapping.",Todo
E12,Ikigai & Profile,F12.5,Testing Ikigai,US12.5.1,Write tests for recommendation scoring and wizard flow,T12.5.1.1,Write unit tests for the recommendation algorithm and E2E tests for onboarding wizard interactions,"Create Vitest tests for the recommend.ts algorithm to ensure correct ranking; use Playwright to run through the /ikigai wizard, fill sample responses and verify recommendations output and profile persistence.",Todo
E13,Micro-Credential Studio,F13.1,Studio UI & Sprints,US13.1.1,As a learner I need a studio to complete learning sprints with tasks and evidence upload,T13.1.1.1,Create /studio page with list of micro-stacks and ability to start a sprint; show tasks and evidence requirements.,"Develop /studio/+page.svelte with view listing available micro-stack sprints. When a user selects a stack, display tasks and upload forms for evidence artefacts. Provide progress tracking and completion status.",Todo
E13,Micro-Credential Studio,F13.2,Data model & Migrations,US13.2.1,"Define database tables for badges, artifacts and attempts",T13.2.1.1,"Create D1 migrations for micro_badges, micro_artifacts and micro_attempts tables storing user progress and evidence.","Write SQL migration files to add tables: micro_badges (id, title, description, user_id, awarded_at), micro_artifacts (id, badge_id, user_id, file_url, metadata), micro_attempts (id, user_id, stack_id, status, started_at, completed_at).",Todo
E13,Micro-Credential Studio,F13.3,Rubric Engine,US13.3.1,Build rubric engine to assess evidence and assign badges,T13.3.1.1,Implement rubric.ts evaluating artifacts based on criteria and scoring; issue badges when threshold reached.,"Write a rubric engine function that takes submitted artifacts, compares them against predefined criteria for each micro-stack (e.g., coverage of elements, quality) and returns a score. If score is above threshold, mark badge as awarded in database and return success.",Todo
E13,Micro-Credential Studio,F13.4,Starter Stacks & Demo Content,US13.4.1,Provide two starter micro-stacks: Energy Retrofit Blueprint and Rural Product Lab,T13.4.1.1,Seed initial micro-stack definitions and tasks for two demonstration stacks.,"Create data describing each micro-stack including name, overview, tasks, criteria for passing. Insert into database or static files accessible by the studio. Provide tasks such as data gathering, blueprint drafting, and artifact submission.",Todo
E13,Micro-Credential Studio,F13.5,Testing studio flow,US13.5.1,Write tests for rubric scoring and user interface interactions,T13.5.1.1,"Write unit tests for rubric functions and Playwright tests for starting a sprint, submitting evidence and receiving a badge","Ensure rubric functions produce expected scores for sample artifacts. Use Playwright to run through the studio; start a sprint, upload sample evidence (using file picker), submit and see badge appear in wallet placeholder.",Todo
E14,Credential Wallet,F14.1,Credential Storage & API,US14.1.1,As a learner I need to store my earned credentials and access them through an API,T14.1.1.1,Create credentials_vc table and add API routes to create and fetch credentials.,"Write D1 migration for credentials_vc with fields id, user_id, vc_payload, issued_at, revoked_at. Implement /v1/credentials POST to store a credential and /v1/credentials GET to list user’s credentials. Secure endpoints via RBAC.",Todo
E14,Credential Wallet,F14.2,Wallet UI,US14.2.1,As a learner I need a wallet page to view my credentials and copy share links,T14.2.1.1,Develop /wallet page showing a list of credentials with details and share buttons.,"Create /wallet/+page.svelte that fetches credentials via API and displays them in cards. Show credential name, issue date, status and buttons to copy share link or QR code. Provide a message if no credentials.",Todo
E14,Credential Wallet,F14.3,VC Signing & Verification,US14.3.1,Implement DID issuer and W3C-VC signing and verification for credentials,T14.3.1.1,"Generate signing key, implement functions to sign credentials using did:web issuer and verify signatures; add revocation mechanism.","Generate ED25519 signing keys and publish DID document at /.well-known/did.json. Implement functions in server (apps/api/src/lib/credentials.ts) to sign a credential payload, issue W3C-VC, store signature in credentials_vc table, and verify credentials on retrieval. Create revocation list stored in R2 and check during verification.",Todo
E14,Credential Wallet,F14.4,Share Page with QR Code,US14.4.1,As a learner I want to share my credential via a shareable page with a QR code,T14.4.1.1,Create share page route that reads credential by ID and generates QR code link.,"Implement page /wallet/share/[id]/+page.svelte that fetches the credential by ID, verifies signature, and shows credential details with a QR code (e.g., using qrcode library) that links back to the same page. Provide share buttons.",Todo
E14,Credential Wallet,F14.5,Testing wallet and signing,US14.5.1,Write unit tests for signing and verifying credentials and E2E tests for wallet UI,T14.5.1.1,"Create tests for sign/verify functions, table migrations and Playwright tests for viewing and sharing credentials.","Write Vitest tests covering sign and verify functions, ensure keys are used properly and revocation is respected. Use Playwright to create a credential, view it in wallet and share via QR page.",Todo
E15,Climate Hazard Backbone,F15.1,Metrics Schema & Migration,US15.1.1,"Create climate_hazard_metrics table with hazard_id, geoid, year, metric, value and source fields",T15.1.1.1,Write SQL migration 0017_climate_hazard_metrics.sql adding the table to D1.,"Define table climate_hazard_metrics with columns: id, hazard_id, geoid, year, metric, value, source, created_at, updated_at. Add primary key and indexes on hazard_id and geoid. Create migration script in packages/db/migrations.",Todo
E15,Climate Hazard Backbone,F15.2,Ingest FEMA NRI & INFORM data,US15.2.1,As a data engineer I need to ingest FEMA and INFORM data and map to our metrics schema,T15.2.1.1,Implement ingest scripts for FEMA and INFORM datasets to parse and load metrics into climate_hazard_metrics table.,"Create apps/ingest/src/datasets/fema.ts and inform.ts that download or read from provided fixture files, map each indicator to a hazard_id, geoid and metric value, and insert into D1. Use fixtures for development and support incremental loads.",Todo
E15,Climate Hazard Backbone,F15.3,Provide sample fixtures,US15.3.1,Add fixture files for FEMA and INFORM for local testing,T15.3.1.1,Place sample fixture files under data/fema/fixtures and data/inform/fixtures and include them in repository.,Add small subsets of FEMA NRI and INFORM datasets into data/fema/fixtures and data/inform/fixtures. Document the mapping to hazard_id and metrics in comments or README.,Todo
E15,Climate Hazard Backbone,F15.4,API Endpoint for Climate Metrics,US15.4.1,Expose metrics via /v1/metrics/climate with filter parameters,T15.4.1.1,"Create API route that returns climate hazard metrics filtered by hazard_id, geoid, year.","Implement a Hono route /v1/metrics/climate that accepts query parameters hazard_id, geoid and year. Query the climate_hazard_metrics table and return results as JSON. Add parameter validation and error handling.",Todo
E15,Climate Hazard Backbone,F15.5,Testing hazard ingestion and API,US15.5.1,Write tests to verify ingestion mapping and API responses,T15.5.1.1,Write unit tests for ingest mappers and E2E tests for API filtering.,Create Vitest tests to ensure FEMA and INFORM ingest functions produce correct row counts and metrics mapping. Use API test to call /v1/metrics/climate with different filters and check responses. Use Playwright to view metrics in a simple UI if necessary.,Todo
E16,ISO Crosswalk & Feeds,F16.1,Crosswalk Expansion,US16.1.1,Expand iso_crosswalk.csv to include new countries and subdivisions,T16.1.1.1,"Update data/iso_crosswalk.csv and generator script to include new ISO codes for UK, France, Germany, Japan, Peru, Mexico and others.","Add entries for missing ISO-3166-2 codes and subdivisions across UK, FR, DE, JP, PE, MX and update generator script that produces TypeScript enums and mapping functions. Ensure new codes compile in the API and UI.",Todo
E16,ISO Crosswalk & Feeds,F16.2,EU/APAC Source Stubs,US16.2.1,"Add stub sources for EU and APAC programs (UK Find a Grant, UKRI, HMRC, FR, DE, JP, PE, MX) with feature flags",T16.2.1.1,Create source files for new feeds with feature flags disabled by default.,"Implement ingest source stubs at apps/ingest/src/sources/uk_findagrant.ts, ukri.ts, hmrc.ts, fr.ts, de.ts, jp.ts, pe.ts, mx.ts. Each exports a descriptor with name, description, cron schedule and disabled flag. Register in the ingestion system. Add feature flags per source in config.",Todo
E16,ISO Crosswalk & Feeds,F16.3,Enums & Feature Flags,US16.3.1,Generate enums for new ISO codes and update source registry to reference them,T16.3.1.1,"Modify generator to output TypeScript enums for new codes and update source registry, ensuring compile-time safety.",Update generator script to read iso_crosswalk.csv and produce updated enums for countries and subdivisions. Modify ingest and API code to reference these enums for type safety. Add feature flags to enable or disable each new feed via environment variables or config.,Todo
E16,ISO Crosswalk & Feeds,F16.4,Testing crosswalk & feeds,US16.4.1,Write type check and smoke test to ensure new feeds compile and register correctly,T16.4.1.1,Run type checking after adding codes and create ingest smoke tests to ensure stubs register.,Run bun typecheck to verify enums compile. Create a test script that registers each stub source and logs that it is disabled by default. Write Playwright tests that confirm new sources appear in the /v1/sources list with disabled flag.,Todo
E17,Application Alerts,F17.1,Calendar Monitors,US17.1.1,As an operator I need to monitor closing application windows and generate alerts,T17.1.1.1,Implement monitors that scan Calendar KV and create alert objects when windows closing within threshold.,"Create apps/ingest/src/jobs/monitors/calendar-monitors.ts that reads entries from CALENDAR_KV, identifies programs closing within X days, and writes alert objects into an alerts queue or database. Set up Cron schedule.",Todo
E17,Application Alerts,F17.2,Alerts Preview API,US17.2.1,Provide /v1/alerts/preview endpoint for dev to view generated alerts,T17.2.1.1,"Implement /v1/alerts/preview route that returns pending alerts for testing; include alert type, message and relevant program IDs.",Develop API route apps/api/src/routes/alerts.ts for preview; fetch alerts from queue or table for the current tenant and return them sorted by priority. Document that this is a dev-only endpoint.,Todo
E17,Application Alerts,F17.3,Email Templates,US17.3.1,Define email templates and delivery for alert digest and per-alert notifications,T17.3.1.1,Create Postmark (or console provider) templates for alert digest and single alert emails with dynamic content; integrate sending logic.,"Develop template files with placeholders (subject, list of alerts, link to view more). Add email sending function using chosen provider in apps/api/src/lib/alerts.ts. Add environment variables for provider keys. Provide tests for correct merging of template and data.",Todo
E17,Application Alerts,F17.4,Testing monitors and alerts,US17.4.1,Write tests verifying monitor logic and preview responses,T17.4.1.1,Write unit tests for monitor job to ensure alerts are created correctly and E2E tests for preview endpoint and email send simulation.,Create Vitest tests for monitor functions that handle threshold logic and group alerts. Write API tests to call /v1/alerts/preview and verify returned alerts. Use a fake email provider to simulate sending and check that templates are filled correctly.,Todo
E18,Ingestion Observability,F18.1,Run & Diff Tables,US18.1.1,Add tables for ingestion_runs and diffs to capture run metadata and program changes,T18.1.1.1,"Create migrations for ingestion_runs, program_diffs and snapshot_diffs tables with appropriate fields and indexes.","Write D1 migration files adding tables ingestion_runs (id, source, status, started_at, finished_at, metrics), program_diffs (id, program_id, field, old_value, new_value, run_id) and snapshot_diffs (id, source, diff_payload, created_at).",Todo
E18,Ingestion Observability,F18.2,CLI & Logging,US18.2.1,Provide CLI command to run ingestion once and output diff summaries,T18.2.1.1,"Add CLI script bun run ingest:once --source=<id> that runs ingestion pipeline, logs run metrics and prints diff summary.","Write a script in apps/ingest/bin/ingest-once.ts that loads a source by ID, runs the ingest pipeline, stores run metadata in ingestion_runs table, calculates diffs against previous snapshots and prints a summary (number of changes, new programs).",Todo
E18,Ingestion Observability,F18.3,Admin Dashboard,US18.3.1,As an admin I need a dashboard page to see recent ingestion runs and their health,T18.3.1.1,"Build /admin/ingest page listing runs with status, duration, diff counts and links to diff details.","Develop page in apps/web/src/routes/admin/ingest/+page.svelte that fetches ingestion_runs from API, displays table with run ID, source, start time, finish time, status and diff counts. Provide link to view diff details and logs.",Todo
E18,Ingestion Observability,F18.4,Diff Utility,US18.4.1,Implement diff function ignoring noisy fields and storing result for display,T18.4.1.1,Create diff utility that compares program objects and stores changed fields in program_diffs table,Write a helper function that takes two program objects and returns an array of field differences ignoring timestamps and order-insignificant fields. Save results to program_diffs table for later display in the dashboard.,Todo
E18,Ingestion Observability,F18.5,Testing observability features,US18.5.1,Write unit and integration tests for run recording and diff tracking,T18.5.1.1,Create tests verifying ingestion_runs are written correctly and diffs are accurate; write Playwright tests for the admin page display.,"Create Vitest tests that call ingest pipelines with fixture data and ensure ingestion_runs and diffs are recorded properly. Use Playwright to load the admin ingest page, view runs and diff details and check that counts match.",Todo
E19,Authentication & MFA,F19.1,End-to-End Auth Flow Tests,US19.1.1,"Test account invite, login, MFA enroll, session refresh and logout",T19.1.1.1,Write Playwright tests for the full auth lifecycle from account invitation to logout with MFA.,"Develop Playwright tests that simulate an admin inviting a user, user setting password, enrolling MFA, logging in, refreshing session token and logging out. Ensure tokens and sessions behave correctly and roles are applied.",Todo
E19,Authentication & MFA,F19.2,MFA Setup & Verification,US19.2.1,Implement MFA enrollment and verification screens,T19.2.1.1,Create pages for MFA enrollment and verification integrated with existing auth flow.,"Add UI flows in apps/web for users to enroll in multi-factor authentication (e.g., OTP via app) after first login. Provide QR code and input field. Implement verification page to prompt for OTP code on login if MFA is enabled. Update auth API to verify codes.",Todo
E19,Authentication & MFA,F19.3,Admin Runbooks,US19.3.1,"Provide runbooks describing approval, revocation and archiving of users and MFA credentials",T19.3.1.1,Write docs/admin-runbooks.md describing step-by-step admin procedures including approval flows and revocation of MFA.,"Create markdown documentation under docs/admin-runbooks.md covering procedures for inviting and approving users, enabling or disabling MFA, revoking access, and archiving user data. Include references to CLI commands or UI actions.",Todo
E19,Authentication & MFA,F19.4,Testing auth hardening,US19.4.1,Write tests verifying proper gating of admin routes and session lifecycles,T19.4.1.1,Write tests ensuring /admin routes require admin role and that sessions expire and refresh appropriately.,"Use Playwright to test that admin-only pages return unauthorized for non-admin users, and that sessions expire after configured period, requiring re-login. Add unit tests to check token expiry and session refresh logic in API.",Todo
E20,Atlas Docs,F20.1,Docs Site,US20.1.1,Develop docs site to showcase design system with live playgrounds,T20.1.1.1,Create new SvelteKit app under apps/docs with component examples and design guidelines.,"Scaffold a new SvelteKit application in apps/docs that serves documentation pages. Set up routes to show tokens, primitives, ReportCard, StackBuilder, BlueprintComposer and MapCanvas. Provide interactive examples using Svelte REPL or static code blocks.",Todo
E20,Atlas Docs,F20.2,Changelog & Recipes,US20.2.1,Provide a changelog page and recipes for golden path examples,T20.2.1.1,"Implement page for token diff and design recipes such as Peru Water, Germany Retrofits.",Create a page in docs site that reads changes between token versions (diff) and displays them. Add recipe pages describing how to build sample opportunities such as Peru Water irrigation and Germany retrofit blueprint using Atlas components step-by-step.,Todo
E20,Atlas Docs,F20.3,Integration & Build Pipeline,US20.3.1,Integrate docs site into build and deploy pipeline to serve via Workers,T20.3.1.1,Update monorepo build scripts to compile docs site and add route mapping for /docs in wrangler configuration.,Modify build process to generate static output of docs site and configure wrangler.toml to serve /docs route from apps/docs. Ensure environment variables pass through and the docs site is accessible in staging and production.,Todo
E20,Atlas Docs,F20.4,Testing docs site,US20.4.1,Write smoke tests for docs site routes and interactive examples,T20.4.1.1,Use Playwright to navigate docs pages and interact with component playgrounds; ensure examples render.,"Write Playwright tests to visit /docs, tokens page, components pages, interact with examples and check that styles and interactions behave as expected. Confirm that docs site builds without errors in CI.",Todo
E21,Performance & Edge,F21.1,Critical CSS & Inline Resources,US21.1.1,Improve first-paint by inlining critical CSS and fonts,T21.1.1.1,Identify critical CSS via build analysis and inline into HTML shell using SvelteKit hooks.,Use a plugin or custom script to extract critical CSS used on the first paint and inline it into the HTML shell in SvelteKit. Preload fonts and avoid blocking requests.,Todo
E21,Performance & Edge,F21.2,Image Optimization,US21.2.1,Serve images with appropriate size and transform via Cloudflare Images,T21.2.1.1,Configure Cloudflare Images or other service to auto-resize and compress images; update component usage.,Set up Cloudflare Images integration in wrangler configuration. Replace static image references with Cloudflare image URLs or the built-in <Image> component that requests optimized versions. Add sizes and srcset for responsive images.,Todo
E21,Performance & Edge,F21.3,Caching & HTTP Headers,US21.3.1,Apply caching headers and security headers to improve performance and security,T21.3.1.1,"Update wrangler.toml and HTTP middleware to set long cache TTLs and strict CSP, HSTS and other security headers.","Modify wrangler.toml routes to enable caching for static assets with appropriate TTL. Implement middleware that sets CSP, COOP/COEP, HSTS and other security headers in Worker responses to satisfy recommended security and performance best practices.",Todo
E21,Performance & Edge,F21.4,Code Splitting & Lazy Load,US21.4.1,Implement route-level code splitting and lazy-load heavy libraries like MapLibre,T21.4.1.1,Use SvelteKit dynamic imports and load functions to lazy-load MapCanvas and heavy third-party libraries on demand.,Refactor components to load MapLibre and charting libraries only when their pages are visited. Use SvelteKit’s dynamic import syntax and ensure fallback skeletons show during loading. Add tests to verify bundle sizes and load times.,Todo
E21,Performance & Edge,F21.5,Performance Testing,US21.5.1,Write Lighthouse and axe CI gates to ensure performance and accessibility budgets,T21.5.1.1,Integrate Lighthouse CI and axe into GitHub workflows with thresholds for TTI and a11y metrics.,"Set up a GitHub Actions workflow that runs Lighthouse CI against staging or preview, capturing metrics like TTI, FCP, and a11y scores. Fail builds if budgets are not met. Add axe-core analysis to ensure accessibility compliance.",Todo
E22,Demo Seeds,F22.1,Import Demo Seeds,US22.1.1,Provide curated demo seeds to quickly illustrate golden-path scenarios,T22.1.1.1,"Create JSON files de_retrofits.json, pe_irrigation.json and jp_grid.json with sample programs, partners, assets and blueprints.","Add data/demo/de_retrofits.json, pe_irrigation.json, jp_grid.json containing sample capital programs, technologies, partners and blueprint drafts. Include top-level objects for each entity with description and metrics.",Todo
E22,Demo Seeds,F22.1,Import Demo Seeds,US22.1.2,Write importers to load demo seeds into the system and add quick links,T22.1.2.1,Implement import functions that parse demo seed files and create objects in D1 database; add links on the Discover and Plans pages to create blueprint from seeds.,"Create scripts in apps/ingest or apps/api that read the JSON seed files and insert them into the appropriate tables (programs, partners, assets, opportunities). Add UI buttons on the Discover page to quickly load a seed into the blueprint composer with prefilled data.",Todo
E22,Demo Seeds,F22.2,Testing demo import,US22.2.1,Write Playwright tests verifying the seeds import and prefilled blueprint creation,T22.2.1.1,Create E2E tests that load demo seeds and verify blueprint prefill works.,"Write tests that click a “Create Blueprint from demo” button, verify the blueprint composer opens with prefilled data matching the seed, and confirm that LOI/SOW export still functions. Add unit tests for importer functions to ensure they parse files correctly.",Todo
E23,Licensing & Governance,F23.1,Licensing Matrix & SOP,US23.1.1,As an admin I need documentation on licensing of data sources and procedures for enabling/disabling them,T23.1.1.1,"Write docs/LICENSING.md covering all data sources, their statuses, license keys, expiry, notes and redistributable flags.","Create a markdown file docs/LICENSING.md that lists each data source (INFORM, FEMA, WRISK etc.), license details, API keys, expiry dates and whether the data can be redistributed (full payload, metadata-only, private). Include instructions for updating license status and keys.",Todo
E23,Licensing & Governance,F23.2,Ingest Guard & Flags,US23.2.1,Prevent ingest of restricted datasets without approval,T23.2.1.1,Implement ingest guard that checks license flags and aborts run if license is missing or restricted; update config.,"Modify ingest pipeline entrypoints to load license status for each dataset. If a dataset’s license is missing or flagged as restricted, skip ingestion and log an event. Provide environment toggles or config for enabling restricted sources when licensed.",Todo
E23,Licensing & Governance,F23.3,Governance Events,US23.3.1,Track all actions on licensing and dataset configuration changes,T23.3.1.1,"Add governance_events table and record actions such as enabling/disabling sources, updating keys or statuses.","Create D1 migration for governance_events table capturing user_id, event_type, target, data, created_at. Ensure that admin UI for data source management writes events whenever changes occur and include links to view history.",Todo
E23,Licensing & Governance,F23.4,Testing licensing gate,US23.4.1,Write tests ensuring ingestion stops for restricted datasets and governance events are logged,T23.3.1.1,Write unit tests for the guard function and Playwright tests for admin editing of license status.,"Implement tests verifying that when license flag is missing or restricted, ingestion run is aborted. Write admin UI tests to update license status and confirm events recorded in governance_events table.",Todo
E24,Staging Integration,F24.1,Configure Staging Environment,US24.1.1,"Prepare wrangler.toml staging bindings with D1, KV, R2 and Durable Objects",T24.1.1.1,"Update wrangler configuration for staging environment including namespace IDs, binding names and secrets.","Modify wrangler.toml to include staging-specific bindings for D1 (database ID), KV namespaces (calendar, feature flags), R2 buckets (payload storage) and Durable Objects. Add [env.staging] section with environment variables and secrets to load from Cloudflare secrets.",Todo
E24,Staging Integration,F24.2,Enable monitors & feature flags,US24.1.2,Turn on monitors and feature flags for staging,T24.1.2.1,"Set feature flags for staging environment to enable signals, alerts and other modules; schedule calendar monitors.","Write config or migration to enable feature flags like signals_enabled, alerts_enabled in staging. Update cron triggers to run calendar writer and alert monitors on staging. Document these features and add health check endpoints for verifying monitors run.",Todo
E24,Staging Integration,F24.3,Deploy Staging and Test Golden Paths,US24.1.3,Deploy the full system to staging and run golden path demo tests,T24.1.3.1,Deploy to staging environment via bun run deploy and run Playwright tests verifying golden path flows.,"Execute bun run deploy to staging environment, verify /v1/health, /v1/programs, /v1/sources, /v1/playbooks endpoints. Run Playwright test suite to go through golden path flows: create blueprint for DE retrofit, PE irrigation, JP grid. Fix any issues found.",Todo
E25,Production Rollout,F25.1,Post-Deploy Validation,US25.1.1,Run validation script checking data freshness and coverage after deploy,T25.1.1.1,Write a post-deploy script that checks /v1/sources freshness and coverage thresholds for production,"Develop a script or endpoint /v1/postdeploy that inspects current program catalog, checks last updated timestamps and ensures coverage by country and sector meets defined thresholds. Output summary and flag potential issues.",Todo
E25,Production Rollout,F25.2,Alerts & Runbooks,US25.2.1,Define alert thresholds and on-call runbooks for production,T25.2.1.1,"Document and implement alert thresholds for ingestion failures, data freshness and system errors; provide runbooks for incidents","Write YAML or config defining thresholds for errors (e.g., ingestion error rate > 5%), stale sources (updated > 14 days), and blueprint failures. Document runbooks instructing on-call engineers to debug ingestion, restart monitors or roll back changes.",Todo
E25,Production Rollout,F25.3,Retention & Policies,US25.3.1,Implement R2 retention policy and finalize production guardrails,T25.3.1.1,Define and apply object lifecycle rules in R2 for snapshot retention and implement gating for restricted data.,Set R2 bucket policies to retain snapshots for 90 days then purge. Implement gating in code to ensure restricted data is only accessible to authorized roles. Document these policies and implement tests verifying deletion after retention period.,Todo
E25,Production Rollout,F25.4,Testing & Sign-off,US25.4.1,Write final integration tests for production rollout and capture sign-off from stakeholders,T25.4.1.1,Write tests to validate the full production deployment and capture stakeholders’ approval via checklists.,"Create Playwright tests hitting the production endpoints to ensure endpoints respond successfully and that golden path flows still work. Provide a checklist of UI, API and integration validations for stakeholders to sign off before final rollout.",Todo
