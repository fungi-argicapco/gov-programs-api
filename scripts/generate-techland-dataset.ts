#!/usr/bin/env bun
import { readFileSync, writeFileSync, mkdirSync } from 'node:fs';
import { join } from 'node:path';

const DATA_DIR = join(process.cwd(), 'data', 'techland_dataset');
const OUTPUT_FILE = join(process.cwd(), 'apps', 'ingest', 'src', 'datasets', 'techland.ts');

const FILES = [
  { name: 'industry_clusters', typeName: 'IndustryClusterEntry' },
  { name: 'workforce_ecosystem', typeName: 'WorkforceProgramEntry' },
  { name: 'infrastructure_assets', typeName: 'InfrastructureAssetEntry' },
  { name: 'regulatory_profiles', typeName: 'RegulatoryProfileEntry' },
  { name: 'raid_log', typeName: 'RaidLogEntry' },
  { name: 'source_documentation', typeName: 'SourceDocumentationEntry' }
] as const;

type FileDef = typeof FILES[number];

function readJsonl(path: string): any[] {
  const raw = readFileSync(path, 'utf8');
  return raw
    .split(/\r?\n/)
    .map((line) => line.trim())
    .filter((line) => line.length > 0)
    .map((line) => JSON.parse(line));
}

function formatValue(value: unknown): string {
  if (typeof value === 'string') {
    const escaped = value.replace(/`/g, '\\`');
    return `\`${escaped}\``;
  }
  if (value === null) {
    return 'null';
  }
  if (Array.isArray(value)) {
    const joined = value.map(formatValue).join(', ');
    return `[${joined}]`;
  }
  return JSON.stringify(value, null, 2);
}

function mapObject(obj: Record<string, unknown>): string {
  const entries = Object.entries(obj);
  const lines = entries.map(([key, value]) => `  ${key}: ${formatValue(value)}`);
  return `{
${lines.join(',\n')}
}`;
}

function emitType(name: string, sample: Record<string, unknown>): string {
  const fields = Object.entries(sample).map(([key, value]) => {
    const isOptional = value === null || value === undefined;
    const tsType = 'string';
    return `  ${key}${isOptional ? '?' : ''}: ${tsType};`;
  });
  return `export type ${name} = {
${fields.join('\n')}
};`;
}

function main() {
  mkdirSync(join(process.cwd(), 'apps', 'ingest', 'src', 'datasets'), { recursive: true });
  const chunks: string[] = [];
  chunks.push('// Auto-generated by scripts/generate-techland-dataset.ts');
  chunks.push('// Do not edit by hand.');
  chunks.push('');

  for (const file of FILES) {
    const jsonlPath = join(DATA_DIR, `${file.name}.jsonl`);
    const rows = readJsonl(jsonlPath);
    if (rows.length === 0) {
      throw new Error(`No rows found in ${jsonlPath}`);
    }
    chunks.push(emitType(file.typeName, rows[0]));
    const mappedRows = rows.map((row) => mapObject(row));
    const constName = file.name.toUpperCase();
    chunks.push(`export const ${constName}: readonly ${file.typeName}[] = [
${mappedRows.join(',\n')}
];`);
    chunks.push('');
  }

  const output = chunks.join('\n');
  writeFileSync(OUTPUT_FILE, `${output}\n`, 'utf8');
}

main();
